/*
 * Copyright (C) 2020 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */

package com.android.tools.build.bundletool.shards;

import static com.android.tools.build.bundletool.model.targeting.TargetingUtils.standaloneApkVariantTargeting;
import static com.google.common.base.Preconditions.checkState;
import static com.google.common.base.Predicates.not;
import static com.google.common.collect.ImmutableList.toImmutableList;
import static com.google.common.collect.Iterables.getOnlyElement;
import static com.google.common.collect.MoreCollectors.onlyElement;

import com.android.bundle.Targeting.ApkTargeting;
import com.android.tools.build.bundletool.mergers.ModuleSplitsToShardMerger;
import com.android.tools.build.bundletool.model.BundleModule;
import com.android.tools.build.bundletool.model.ModuleSplit;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Maps;
import javax.inject.Inject;

/** Generates standalone APKs for Apex bundles. */
public class StandaloneApexApksGenerator {

  private final ModuleSplitterForShards moduleSplitter;
  private final ModuleSplitsToShardMerger shardsMerger;

  @Inject
  public StandaloneApexApksGenerator(
      ModuleSplitterForShards moduleSplitter, ModuleSplitsToShardMerger shardsMerger) {
    this.moduleSplitter = moduleSplitter;
    this.shardsMerger = shardsMerger;
  }

  /**
   * Generates sharded APKs from APEX module. Each sharded APK is generated by fusing one master
   * split and one system image file, targeted by multi Abi.
   */
  public ImmutableList<ModuleSplit> generateStandaloneApks(ImmutableList<BundleModule> modules) {
    ImmutableList<ModuleSplit> apexSplits =
        moduleSplitter.generateSplits(getOnlyElement(modules), ImmutableSet.of());

    ModuleSplit masterSplit =
        apexSplits.stream().filter(ModuleSplit::isMasterSplit).collect(onlyElement());
    checkState(
        masterSplit.getApkTargeting().equals(ApkTargeting.getDefaultInstance()),
        "Master splits are expected to have default targeting.");

    return apexSplits.stream()
        .filter(not(ModuleSplit::isMasterSplit))
        .map(module -> mergeSingleApexShard(masterSplit, module))
        .collect(toImmutableList());
  }

  private ModuleSplit mergeSingleApexShard(ModuleSplit masterSplit, ModuleSplit multiAbiSplit) {
    ModuleSplit mergedShard =
        shardsMerger.mergeSingleShard(
            ImmutableList.of(masterSplit, multiAbiSplit), Maps.newHashMap());
    return mergedShard.toBuilder()
        .setApexConfig(masterSplit.getApexConfig().get())
        .setApexEmbeddedApkConfigs(masterSplit.getApexEmbeddedApkConfigs())
        .setVariantTargeting(standaloneApkVariantTargeting(mergedShard))
        .build();
  }
}
