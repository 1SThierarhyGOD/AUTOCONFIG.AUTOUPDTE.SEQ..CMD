@using Aspire.Dashboard.Model
@implements IDialogContentComponent<List<EnvironmentVariableViewModel>>
@inject IJSRuntime JS

<FluentDialogBody>
    <div class="GridContainer">
        <FluentStack Orientation="Orientation.Vertical">
            <FluentToolbar Orientation="Orientation.Horizontal">
                <FluentButton Appearance="Appearance.Lightweight"
                              IconEnd="@(defaultMasked ? unmaskIcon : maskIcon)"
                              Title="@(defaultMasked ? "Show Values" : "Hide Values")"
                              OnClick="ToggleMaskState"
                              slot="end" />
                <FluentSearch Placeholder="Filter..."
                              Immediate="true"
                              Autofocus="true"
                              @bind-Value="filter"
                              @oninput="HandleFilter"
                              AfterBindValue="HandleClear"
                              slot="end" />
            </FluentToolbar>
            <FluentDataGrid Items="@FilteredItems"
                            ResizableColumns="true"
                            Style="width:100%"
                            GenerateHeader="GenerateHeaderOption.Sticky">
                <TemplateColumn Title="Name" Class="nameColumn" SortBy="@nameSort" Sortable="true">
                    <FluentStack Orientation="Orientation.Horizontal">
                        <span class="cellText">
                            <FluentHighlighter HighlightedText="@filter"
                                               Text="@context.Name" />
                        </span>
                        @{
                            var anchor = "name-" + context.Name;
                        }
                        <FluentButton Appearance="Appearance.Lightweight"
                                      Id="@anchor"
                                      IconEnd="@(new Icons.Regular.Size16.Copy())"
                                      Class="defaultHidden"
                                      @onclick="@(() => CopyTextToClipboardAsync(context.Name, @anchor))" />
                        <FluentTooltip Anchor="@anchor" Position="TooltipPosition.Top">@preCopyText</FluentTooltip>
                    </FluentStack>
                </TemplateColumn>
                <TemplateColumn Title="Value" Class="valueColumn" SortBy="@valueSort" Sortable="true">
                    <FluentStack Orientation="Orientation.Horizontal">
                        @if (context.IsValueMasked)
                        {
                            <span class="cellText">
                                &#x25cf;&#x25cf;&#x25cf;&#x25cf;&#x25cf;&#x25cf;&#x25cf;&#x25cf;
                            </span>
                        }
                        else
                        {
                            <span class="cellText">
                                <FluentHighlighter HighlightedText="@filter"
                                                   Text="@context.Value" />
                            </span>
                        }
                        <FluentButton Appearance="Appearance.Lightweight"
                                      IconEnd="@(context.IsValueMasked ? unmaskIcon : maskIcon)"
                                      Title="@(context.IsValueMasked ? "Show Value" : "Hide Value")"
                                      OnClick="() => ToggleMaskState(context)" />
                        @{
                            var anchor = "copy-" + context.Name;
                        }
                        <FluentButton Appearance="Appearance.Lightweight"
                                      Id="@anchor"
                                      IconEnd="@(new Icons.Regular.Size16.Copy())"
                                      Class="defaultHidden"
                                      @onclick="@(() => CopyTextToClipboardAsync(context.Value, @anchor))" />
                        <FluentTooltip Anchor="@anchor" Position="TooltipPosition.Top">@preCopyText</FluentTooltip>
                    </FluentStack>
                </TemplateColumn>
            </FluentDataGrid>
        </FluentStack>

    </div>
</FluentDialogBody>

@code {

    [Parameter]
    public List<EnvironmentVariableViewModel>? Content { get; set; }

    private IQueryable<EnvironmentVariableViewModel>? FilteredItems =>
        Content?.Where(vm =>
            vm.Name.Contains(filter, StringComparison.CurrentCultureIgnoreCase) ||
            vm.Value?.Contains(filter, StringComparison.CurrentCultureIgnoreCase) == true
        )?.AsQueryable();

    private const string preCopyText = "Copy to clipboard";
    private const string postCopyText = "Copied!";

    private string filter = "";
    private bool defaultMasked = true;

    private Icon maskIcon = new Icons.Regular.Size16.EyeOff();
    private Icon unmaskIcon = new Icons.Regular.Size16.Eye();

    private GridSort<EnvironmentVariableViewModel> nameSort = GridSort<EnvironmentVariableViewModel>
        .ByAscending(vm => vm.Name);
    private GridSort<EnvironmentVariableViewModel> valueSort = GridSort<EnvironmentVariableViewModel>
        .ByAscending(vm => vm.Value);

    private void ToggleMaskState()
    {
        defaultMasked = !defaultMasked;
        if (Content is not null)
        {
            foreach (var vm in Content)
            {
                vm.IsValueMasked = defaultMasked;
            }
        }
    }

    private void ToggleMaskState(EnvironmentVariableViewModel vm)
    {
        vm.IsValueMasked = !vm.IsValueMasked;
        CheckAllMaskStates();
    }

    private void HandleFilter(ChangeEventArgs args)
    {
        if (args.Value is string newFilter)
        {
            filter = newFilter;
        }
    }

    private void HandleClear(string? value)
    {
        filter = value ?? string.Empty;
    }

    private void CheckAllMaskStates()
    {
        if (Content is not null)
        {
            bool foundMasked = false;
            bool foundUnmasked = false;
            foreach (var vm in Content)
            {
                foundMasked |= vm.IsValueMasked;
                foundUnmasked |= !vm.IsValueMasked;
            }

            if (!foundMasked && foundUnmasked)
            {
                defaultMasked = false;
            }
            else if (foundMasked && !foundUnmasked)
            {
                defaultMasked = true;
            }
        }
    }

    private async Task CopyTextToClipboardAsync(string? text, string id)
    {
        await JS.InvokeVoidAsync("copyTextToClipboard", id, text, preCopyText, postCopyText);
    }
}
