@using Aspire.Dashboard.Model
@using Aspire.Dashboard.Model.Otlp
@using Aspire.Dashboard.Otlp.Storage
@using Microsoft.Fast.Components.FluentUI;
@implements IDialogContentComponent<FilterDialogViewModel>

<FluentStack Orientation="Orientation.Vertical" VerticalGap="8">
    <FluentCombobox Items=@Parameters @bind-Value="@Parameter" Width="100%" />

    <FluentSelect TOption="FilterCondition" Items="@Conditions.Keys" @bind-SelectedOption="@Condition" OptionText="@(i => Conditions[i])" Width="100%" />

    <FluentTextField @bind-Value="Value" Placeholder="Value" />

    <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Right">
        <FluentButton OnClick="Cancel">Cancel</FluentButton>
        <FluentButton Color="Color.Primary" OnClick="Apply">Apply Filter</FluentButton>
        @if (Content is { })
        {
            <FluentButton Appearance="Appearance.Stealth" aria-label="Remove Filter" OnClick="Delete"><FluentIcon Value="@(new Icons.Regular.Size16.Delete())" /></FluentButton>
        }
    </FluentStack>
</FluentStack>

@code {

    [CascadingParameter]
    public FluentDialog? Dialog { get; set; }

    [Parameter]
    public FilterDialogViewModel Content { get; set; } = default!;

    [Inject]
    public required TelemetryRepository TelemetryRepository { get; set; }

    private string Parameter { get; set; } = default!;
    private FilterCondition Condition { get; set; }
    private string Value { get; set; } = default!;

    protected override void OnInitialized()
    {
        if (Content.Filter is { } logFilter)
        {
            Parameter = logFilter.Field;
            Condition = logFilter.Condition;
            Value = logFilter.Value;
        }
        else
        {
            Parameter = "Message";
            Condition = FilterCondition.Contains;
            Value = "";
        }
    }

    public List<string> Parameters
    {
        get
        {
            var result = new List<string> { "Message", "Application", "TraceId", "SpanId", "ParentId", "OriginalFormat" };
            result.AddRange(Content.LogPropertyKeys);
            return result;
        }
    }

    public Dictionary<FilterCondition, string> Conditions
    {
        get
        {
            var result = new Dictionary<FilterCondition, string>();
            foreach (var c in Enum.GetValues<FilterCondition>())
            {
                result.Add(c, LogFilter.ConditionToString(c));
            }
            return result;
        }
    }

    private void Cancel()
    {
        Dialog!.CancelAsync();
    }

    private void Delete()
    {
        Dialog!.CloseAsync(DialogResult.Ok(new FilterDialogResult() { Filter = Content.Filter, Delete = true }));
    }

    private void Apply()
    {
        if (Content.Filter is { } logFilter)
        {
            logFilter.Field = Parameter;
            logFilter.Condition = Condition;
            logFilter.Value = Value;

            Dialog!.CloseAsync(DialogResult.Ok(new FilterDialogResult() { Filter = logFilter, Delete = false }));
        }
        else
        {
            var filter = new LogFilter
                {
                    Field = Parameter,
                    Condition = Condition,
                    Value = Value
                };
            Dialog!.CloseAsync(DialogResult.Ok(new FilterDialogResult() { Filter = filter, Add = true }));
        }
    }
}
