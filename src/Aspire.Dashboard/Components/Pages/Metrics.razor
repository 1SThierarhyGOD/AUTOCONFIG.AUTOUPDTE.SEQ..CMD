@page "/Metrics/{applicationInstanceId?}"
@page "/Metrics/{applicationInstanceId}/Meter/{meterName}"
@page "/Metrics/{applicationInstanceId}/Meter/{meterName}/Instrument/{instrumentName}"

@using Aspire.Dashboard.Components.Dialogs
@using Aspire.Dashboard.Model
@using Aspire.Dashboard.Model.Otlp
@using Aspire.Dashboard.Otlp.Model
@using Aspire.Dashboard.Otlp.Storage
@using Microsoft.Fast.Components.FluentUI
@using System.Web
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@implements IDisposable

<h1>Metrics</h1>

<div>
    <FluentStack Orientation="Orientation.Vertical">
        <FluentToolbar Orientation="Orientation.Horizontal">
            <FluentSelect TOption="ApplicationViewModel"
                          Items="@_applications"
                          OptionValue="@(c => c.Id)"
                          OptionText="@(c => c.Name)"
                          @bind-SelectedOption="_selectedApplication"
                          @bind-SelectedOption:after="HandleSelectedApplicationChangedAsync" />
        </FluentToolbar>
        <div class="page-content-area">
            @if (_instruments?.Count > 0)
            {
                <FluentSplitter Style="height:100%" Panel1Size="450px">
                    <Panel1>
                        <FluentTreeView  Class="metrics-tree" @bind-CurrentSelected="_selectedTreeItem" @bind-CurrentSelected:after="HandleSelectedTreeItemChanged">
                            <ChildContent>
                                @foreach (var meterGroup in _instruments.GroupBy(i => i.Parent).OrderBy(g => g.Key.MeterName))
                                {
                                    <FluentTreeItem Class="metrics-tree-item" Text="@meterGroup.Key.MeterName" Data="@meterGroup.Key" title="@meterGroup.Key.MeterName">
                                        @foreach (var instrument in meterGroup.OrderBy(i => i.Name))
                                        {
                                            <FluentTreeItem Class="metrics-tree-item" Text="@instrument.Name" Data="@instrument" title="@instrument.Name" />
                                        }
                                    </FluentTreeItem>
                                }
                            </ChildContent>
                        </FluentTreeView>
                    </Panel1>
                    <Panel2>
                        @if (_selectedTreeItem?.Data is OtlpMeter meter)
                        {
                            <h3>@meter.MeterName</h3>
                            @foreach (var item in _instruments.Where(i => i.Parent == meter))
                            {
                                <p>@item.Name: @item.Description</p>
                            }
                        }
                        else if (_selectedTreeItem?.Data is OtlpInstrument instrument)
                        {
                            <h3>@instrument.Name</h3>
                            <p>@instrument.Description</p>
                        }
                        else
                        {
                            <p>Select instrument.</p>
                        }
                    </Panel2>
                </FluentSplitter>
            }
            else if (_instruments == null)
            {
                <div class="empty-content">
                    <FluentIcon Icon="Icons.Regular.Size24.ChartMultiple" />&nbsp;Select an application to view metrics
                </div>
            }
            else
            {
                <div class="empty-content">
                    <FluentIcon Icon="Icons.Regular.Size24.ChartMultiple" />&nbsp;No metrics for the selected application
                </div>
            }
        </div>
    </FluentStack>
</div>

@code {
    private static readonly ApplicationViewModel SelectApplication = new ApplicationViewModel { Id = null, Name = "Select application..." };

    private List<ApplicationViewModel> _applications = default!;
    private ApplicationViewModel _selectedApplication = SelectApplication;
    private Subscription? _applicationsSubscription;
    private Subscription? _metricsSubscription;
    private List<OtlpInstrument>? _instruments;
    private FluentTreeItem? _selectedTreeItem;

    [Parameter]
    public string? ApplicationInstanceId { get; set; }

    [Parameter]
    public string? MeterName { get; set; }

    [Parameter]
    public string? InstrumentName { get; set; }

    [Inject]
    public required TelemetryRepository TelemetryRepository { get; set; }

    [Inject]
    public required TracesViewModel ViewModel { get; set; }

    protected override Task OnInitializedAsync()
    {
        UpdateApplications();
        _applicationsSubscription = TelemetryRepository.OnNewApplications(() => InvokeAsync(() =>
        {
            UpdateApplications();
            StateHasChanged();
        }));

        return Task.CompletedTask;
    }

    protected override void OnParametersSet()
    {
        _selectedApplication = _applications.SingleOrDefault(e => e.Id == ApplicationInstanceId) ?? SelectApplication;
        ViewModel.ApplicationServiceId = _selectedApplication.Id;
        _instruments = !string.IsNullOrEmpty(_selectedApplication.Id) ? TelemetryRepository.GetInstruments(_selectedApplication.Id) : null;
        UpdateSubscription();
    }

    private void UpdateApplications()
    {
        _applications = TelemetryRepository.GetApplications().Select(a => new ApplicationViewModel { Id = a.InstanceId, Name = a.ApplicationName }).ToList();
        _applications.Insert(0, SelectApplication);
        UpdateSubscription();
    }

    private Task HandleSelectedApplicationChangedAsync()
    {
        NavigationManager.NavigateTo($"/Metrics/{_selectedApplication.Id}");
        return Task.CompletedTask;
    }

    private void HandleSelectedTreeItemChanged()
    {
        if (_selectedTreeItem?.Data is OtlpMeter meter)
        {
            NavigationManager.NavigateTo($"/Metrics/{_selectedApplication.Id}/Meter/{meter.MeterName}");
        }
        else if (_selectedTreeItem?.Data is OtlpInstrument instrument)
        {
            NavigationManager.NavigateTo($"/Metrics/{_selectedApplication.Id}/Meter/{instrument.Parent.MeterName}/Instrument/{instrument.Name}");
        }
    }

    private void UpdateSubscription()
    {
        // Subscribe to updates.
        if (_metricsSubscription is null || _metricsSubscription.ApplicationId != _selectedApplication.Id)
        {
            _metricsSubscription?.Dispose();
            _metricsSubscription = TelemetryRepository.OnNewMetrics(_selectedApplication.Id, async () =>
            {
                ViewModel.ClearData();
                await InvokeAsync(StateHasChanged);
            });
        }
    }

    public void Dispose()
    {
        _applicationsSubscription?.Dispose();
        _metricsSubscription?.Dispose();
    }
}
