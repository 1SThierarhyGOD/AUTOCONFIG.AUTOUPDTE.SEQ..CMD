parameters:
  - name: runAsPublic
    type: boolean
    default: false
  - name: buildScript
    type: string
  - name: buildConfig
    type: string
  - name: repoLogPath
    type: string
  - name: repoTestResultsPath
    type: string
  - name: isWindows
    type: string
  - name: dotnetScript
    type: string
  - name: skipTests
    type: boolean
    default: false

steps:
  - pwsh: >-
        echo dotnet coverage merge
        $((Get-ChildItem -Path src -Recurse -Filter *.cs -File  | % { $_.FullName }) -join ' ')
        -f cobertura
        -o '${{ parameters.repoTestResultsPath }}/$(Agent.Os)_$(Agent.JobName).cobertura.xml'
    displayName: Merge code coverage results

  - script: ${{ parameters.buildScript }}
            -restore -build
            -configuration ${{ parameters.buildConfig }}
            /p:ArchiveTests=true
            /bl:${{ parameters.repoLogPath }}/build.binlog
            $(_OfficialBuildIdArgs)
    displayName: Build

  - ${{ if ne(parameters.skipTests, 'true') }}:
    - template: /eng/pipelines/templates/send-to-helix.yml
      parameters:
        HelixProjectPath: '$(Build.SourcesDirectory)/tests/send-to-helix.proj'
        HelixProjectArguments: /p:RunWithCodeCoverage=true /p:RepoTestResultsPath=${{ parameters.repoTestResultsPath }}

        ${{ if eq(parameters.isWindows, 'true') }}:
          HelixTargetQueues: Windows.11.Amd64.Client.Open
        ${{ if ne(parameters.isWindows, 'true') }}:
          HelixTargetQueues: Ubuntu.2204.Amd64.Open

        Creator: $(Build.DefinitionName)
        HelixBuild: $(Build.BuildNumber)
        HelixAccessToken: $(HelixApiAccessToken)

    - script: ${{ parameters.dotnetScript }} dotnet-coverage collect
              --settings $(Build.SourcesDirectory)/eng/CodeCoverage.config
              --output ${{ parameters.repoTestResultsPath }}/NonHelixTests.cobertura.xml
              "${{ parameters.buildScript }} -testnobuild -test -configuration ${{ parameters.buildConfig }} /bl:${{ parameters.repoLogPath }}/tests.binlog /p:SkipHelixReadyTests=true $(_OfficialBuildIdArgs)"
      displayName: Run non-helix tests

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '${{ parameters.repoTestResultsPath }}/$(Agent.Os)_$(Agent.JobName).cobertura.xml'
        PublishLocation: Container
        ArtifactName: CodeCoverageResults
      displayName: Publish coverage results (cobertura.xml)

  - ${{ if eq(parameters.isWindows, 'true') }}:
    - script: ${{ parameters.buildScript }}
              -pack
              -sign $(_SignArgs)
              -publish $(_PublishArgs)
              -configuration ${{ parameters.buildConfig }}
              /bl:${{ parameters.repoLogPath }}/pack.binlog
              /p:Restore=false /p:Build=false
              $(_OfficialBuildIdArgs)
      displayName: Pack, Sign, and Publish

    - script: ${{ parameters.buildScript }}
        -restore -build
        -pack
        -sign $(_SignArgs)
        -publish $(_PublishArgs)
        -configuration $(_BuildConfig)
        /bl:${{ parameters.repoLogPath }}/build-workloads.binlog
        -projects eng\workloads\workloads.csproj
        $(_InternalBuildArgs)
      displayName: Build Workloads

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.SourcesDirectory)/artifacts/packages'
        artifactName: PackageArtifacts
        artifactType: container
      displayName: Publish Package Artifacts

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.SourcesDirectory)/artifacts/VSSetup/$(_BuildConfig)'
        artifactName: VSDropInsertion
        artifactType: container
      displayName: Publish VSDrop MSIs
