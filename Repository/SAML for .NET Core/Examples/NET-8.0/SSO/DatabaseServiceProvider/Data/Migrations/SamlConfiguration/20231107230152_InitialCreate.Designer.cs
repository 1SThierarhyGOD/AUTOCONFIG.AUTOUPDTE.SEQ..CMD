// <auto-generated />
using System;
using ComponentSpace.Saml2.Configuration.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DatabaseServiceProvider.Data.Migrations.SamlConfiguration
{
    [DbContext(typeof(SamlConfigurationContext))]
    [Migration("20231107230152_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.21");

            modelBuilder.Entity("ComponentSpace.Saml2.Configuration.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<int?>("LocalIdentityProviderConfigurationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LocalServiceProviderConfigurationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PartnerIdentityProviderConfigurationIdForLocalCert")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PartnerIdentityProviderConfigurationIdForPartnerCert")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PartnerServiceProviderConfigurationIdForLocalCert")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PartnerServiceProviderConfigurationIdForPartnerCert")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("StoreLocation")
                        .HasColumnType("TEXT");

                    b.Property<string>("StoreName")
                        .HasColumnType("TEXT");

                    b.Property<string>("String")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubjectName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Thumbprint")
                        .HasColumnType("TEXT");

                    b.Property<string>("Use")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LocalIdentityProviderConfigurationId");

                    b.HasIndex("LocalServiceProviderConfigurationId");

                    b.HasIndex("PartnerIdentityProviderConfigurationIdForLocalCert");

                    b.HasIndex("PartnerIdentityProviderConfigurationIdForPartnerCert");

                    b.HasIndex("PartnerServiceProviderConfigurationIdForLocalCert");

                    b.HasIndex("PartnerServiceProviderConfigurationIdForPartnerCert");

                    b.ToTable("Certificate");
                });

            modelBuilder.Entity("ComponentSpace.Saml2.Configuration.LocalIdentityProviderConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ArtifactResolutionServiceUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("DisableSchemaCheck")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("ResolveToHttps")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SingleLogoutServiceUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("SingleSignOnServiceUrl")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("LocalIdentityProviderConfiguration");
                });

            modelBuilder.Entity("ComponentSpace.Saml2.Configuration.LocalServiceProviderConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ArtifactResolutionServiceUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("AssertionConsumerServiceUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("DisableSchemaCheck")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("ResolveToHttps")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SingleLogoutServiceUrl")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("LocalServiceProviderConfiguration");
                });

            modelBuilder.Entity("ComponentSpace.Saml2.Configuration.MappingRules.SamlMappingRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PartnerIdentityProviderConfigurationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PartnerServiceProviderConfigurationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Rule")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PartnerIdentityProviderConfigurationId");

                    b.HasIndex("PartnerServiceProviderConfigurationId");

                    b.ToTable("SamlMappingRule");
                });

            modelBuilder.Entity("ComponentSpace.Saml2.Configuration.PartnerIdentityProviderConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ArtifactEncoding")
                        .HasColumnType("TEXT");

                    b.Property<string>("ArtifactResolutionServiceUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("AssertionConsumerServiceBinding")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("ClockSkew")
                        .HasColumnType("TEXT");

                    b.Property<string>("DataEncryptionAlgorithm")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("DigestAlgorithm")
                        .HasColumnType("TEXT");

                    b.Property<bool>("DisableAssertionReplayCheck")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DisableAudienceRestrictionCheck")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DisableAuthnContextCheck")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DisableClearAllSessionsOnLogout")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DisableDestinationCheck")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DisableIdPInitiatedSso")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DisableInResponseToCheck")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DisableInboundLogout")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DisableLogoutResponseStatusCheck")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DisableOutboundLogout")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DisablePendingLogoutCheck")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DisableRecipientCheck")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DisableTimePeriodCheck")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnableSha1Support")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EncryptLogoutNameID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExpectedAuthnContext")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ForceAuthn")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IssuerFormat")
                        .HasColumnType("TEXT");

                    b.Property<string>("IssuerQualifier")
                        .HasColumnType("TEXT");

                    b.Property<string>("KeyEncryptionAlgorithm")
                        .HasColumnType("TEXT");

                    b.Property<string>("KeyEncryptionDigestAlgorithm")
                        .HasColumnType("TEXT");

                    b.Property<string>("KeyEncryptionMaskGenerationFunction")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("LogoutRequestLifeTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NameIDFormat")
                        .HasColumnType("TEXT");

                    b.Property<string>("NameIDQualifier")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderName")
                        .HasColumnType("TEXT");

                    b.Property<string>("RequestedAuthnContextComparison")
                        .HasColumnType("TEXT");

                    b.Property<string>("RequestedAuthnContexts")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SamlConfigurationId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SignArtifactResolve")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SignArtifactResponse")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SignAuthnRequest")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SignLogoutRequest")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SignLogoutResponse")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SignatureAlgorithm")
                        .HasColumnType("TEXT");

                    b.Property<string>("SingleLogoutServiceBinding")
                        .HasColumnType("TEXT");

                    b.Property<string>("SingleLogoutServiceResponseUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("SingleLogoutServiceUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("SingleSignOnServiceBinding")
                        .HasColumnType("TEXT");

                    b.Property<string>("SingleSignOnServiceUrl")
                        .HasColumnType("TEXT");

                    b.Property<bool>("UseEmbeddedCertificate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("WantArtifactResolveSigned")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("WantArtifactResponseSigned")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("WantAssertionEncrypted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("WantAssertionOrResponseSigned")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("WantAssertionSigned")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WantDigestAlgorithm")
                        .HasColumnType("TEXT");

                    b.Property<bool>("WantLogoutRequestSigned")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("WantLogoutResponseSigned")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("WantNameIDEncrypted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("WantSamlResponseSigned")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WantSignatureAlgorithm")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("SamlConfigurationId");

                    b.ToTable("PartnerIdentityProviderConfiguration");
                });

            modelBuilder.Entity("ComponentSpace.Saml2.Configuration.PartnerServiceProviderConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ArtifactEncoding")
                        .HasColumnType("TEXT");

                    b.Property<string>("ArtifactResolutionServiceUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("AssertionConsumerServiceBinding")
                        .HasColumnType("TEXT");

                    b.Property<string>("AssertionConsumerServiceUrl")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("AssertionLifeTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("AuthnContext")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("ClockSkew")
                        .HasColumnType("TEXT");

                    b.Property<string>("DataEncryptionAlgorithm")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("DigestAlgorithm")
                        .HasColumnType("TEXT");

                    b.Property<bool>("DisableClearAllSessionsOnLogout")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DisableDestinationCheck")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DisableInResponseToCheck")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DisableInboundLogout")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DisableLogoutResponseStatusCheck")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DisableOutboundLogout")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DisablePendingLogoutCheck")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnableSha1Support")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EncryptAssertion")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EncryptLogoutNameID")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EncryptNameID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IssuerFormat")
                        .HasColumnType("TEXT");

                    b.Property<string>("IssuerQualifier")
                        .HasColumnType("TEXT");

                    b.Property<string>("KeyEncryptionAlgorithm")
                        .HasColumnType("TEXT");

                    b.Property<string>("KeyEncryptionDigestAlgorithm")
                        .HasColumnType("TEXT");

                    b.Property<string>("KeyEncryptionMaskGenerationFunction")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("LogoutRequestLifeTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NameIDFormat")
                        .HasColumnType("TEXT");

                    b.Property<string>("NameIDQualifier")
                        .HasColumnType("TEXT");

                    b.Property<string>("RelayState")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SamlConfigurationId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SignArtifactResolve")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SignArtifactResponse")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SignAssertion")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SignLogoutRequest")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SignLogoutResponse")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SignSamlResponse")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SignatureAlgorithm")
                        .HasColumnType("TEXT");

                    b.Property<string>("SingleLogoutServiceBinding")
                        .HasColumnType("TEXT");

                    b.Property<string>("SingleLogoutServiceResponseUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("SingleLogoutServiceUrl")
                        .HasColumnType("TEXT");

                    b.Property<bool>("UseEmbeddedCertificate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ValidAssertionConsumerServiceUrls")
                        .HasColumnType("TEXT");

                    b.Property<bool>("WantArtifactResolveSigned")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("WantArtifactResponseSigned")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("WantAuthnRequestSigned")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WantDigestAlgorithm")
                        .HasColumnType("TEXT");

                    b.Property<bool>("WantLogoutRequestSigned")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("WantLogoutResponseSigned")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WantSignatureAlgorithm")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("SamlConfigurationId");

                    b.ToTable("PartnerServiceProviderConfiguration");
                });

            modelBuilder.Entity("ComponentSpace.Saml2.Configuration.SamlConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LocalIdentityProviderConfigurationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LocalServiceProviderConfigurationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LocalIdentityProviderConfigurationId");

                    b.HasIndex("LocalServiceProviderConfigurationId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SamlConfigurations");
                });

            modelBuilder.Entity("ComponentSpace.Saml2.Configuration.Certificate", b =>
                {
                    b.HasOne("ComponentSpace.Saml2.Configuration.LocalIdentityProviderConfiguration", null)
                        .WithMany("LocalCertificates")
                        .HasForeignKey("LocalIdentityProviderConfigurationId");

                    b.HasOne("ComponentSpace.Saml2.Configuration.LocalServiceProviderConfiguration", null)
                        .WithMany("LocalCertificates")
                        .HasForeignKey("LocalServiceProviderConfigurationId");

                    b.HasOne("ComponentSpace.Saml2.Configuration.PartnerIdentityProviderConfiguration", null)
                        .WithMany("LocalCertificates")
                        .HasForeignKey("PartnerIdentityProviderConfigurationIdForLocalCert");

                    b.HasOne("ComponentSpace.Saml2.Configuration.PartnerIdentityProviderConfiguration", null)
                        .WithMany("PartnerCertificates")
                        .HasForeignKey("PartnerIdentityProviderConfigurationIdForPartnerCert");

                    b.HasOne("ComponentSpace.Saml2.Configuration.PartnerServiceProviderConfiguration", null)
                        .WithMany("LocalCertificates")
                        .HasForeignKey("PartnerServiceProviderConfigurationIdForLocalCert");

                    b.HasOne("ComponentSpace.Saml2.Configuration.PartnerServiceProviderConfiguration", null)
                        .WithMany("PartnerCertificates")
                        .HasForeignKey("PartnerServiceProviderConfigurationIdForPartnerCert");
                });

            modelBuilder.Entity("ComponentSpace.Saml2.Configuration.MappingRules.SamlMappingRule", b =>
                {
                    b.HasOne("ComponentSpace.Saml2.Configuration.PartnerIdentityProviderConfiguration", null)
                        .WithMany("MappingRules")
                        .HasForeignKey("PartnerIdentityProviderConfigurationId");

                    b.HasOne("ComponentSpace.Saml2.Configuration.PartnerServiceProviderConfiguration", null)
                        .WithMany("MappingRules")
                        .HasForeignKey("PartnerServiceProviderConfigurationId");
                });

            modelBuilder.Entity("ComponentSpace.Saml2.Configuration.PartnerIdentityProviderConfiguration", b =>
                {
                    b.HasOne("ComponentSpace.Saml2.Configuration.SamlConfiguration", null)
                        .WithMany("PartnerIdentityProviderConfigurations")
                        .HasForeignKey("SamlConfigurationId");
                });

            modelBuilder.Entity("ComponentSpace.Saml2.Configuration.PartnerServiceProviderConfiguration", b =>
                {
                    b.HasOne("ComponentSpace.Saml2.Configuration.SamlConfiguration", null)
                        .WithMany("PartnerServiceProviderConfigurations")
                        .HasForeignKey("SamlConfigurationId");
                });

            modelBuilder.Entity("ComponentSpace.Saml2.Configuration.SamlConfiguration", b =>
                {
                    b.HasOne("ComponentSpace.Saml2.Configuration.LocalIdentityProviderConfiguration", "LocalIdentityProviderConfiguration")
                        .WithMany()
                        .HasForeignKey("LocalIdentityProviderConfigurationId");

                    b.HasOne("ComponentSpace.Saml2.Configuration.LocalServiceProviderConfiguration", "LocalServiceProviderConfiguration")
                        .WithMany()
                        .HasForeignKey("LocalServiceProviderConfigurationId");

                    b.Navigation("LocalIdentityProviderConfiguration");

                    b.Navigation("LocalServiceProviderConfiguration");
                });

            modelBuilder.Entity("ComponentSpace.Saml2.Configuration.LocalIdentityProviderConfiguration", b =>
                {
                    b.Navigation("LocalCertificates");
                });

            modelBuilder.Entity("ComponentSpace.Saml2.Configuration.LocalServiceProviderConfiguration", b =>
                {
                    b.Navigation("LocalCertificates");
                });

            modelBuilder.Entity("ComponentSpace.Saml2.Configuration.PartnerIdentityProviderConfiguration", b =>
                {
                    b.Navigation("LocalCertificates");

                    b.Navigation("MappingRules");

                    b.Navigation("PartnerCertificates");
                });

            modelBuilder.Entity("ComponentSpace.Saml2.Configuration.PartnerServiceProviderConfiguration", b =>
                {
                    b.Navigation("LocalCertificates");

                    b.Navigation("MappingRules");

                    b.Navigation("PartnerCertificates");
                });

            modelBuilder.Entity("ComponentSpace.Saml2.Configuration.SamlConfiguration", b =>
                {
                    b.Navigation("PartnerIdentityProviderConfigurations");

                    b.Navigation("PartnerServiceProviderConfigurations");
                });
#pragma warning restore 612, 618
        }
    }
}
